# test if the current PR breaks compatibility with OptimalControl.jl
# the workflow has 2 steps
# break: clone repo, build and test OptimalControl, and create artifact from the breakage/ folder
# comment: download artifact, create summary, and add a comment on the PR

name: Breakage

on:
  workflow_call:
    inputs:
      pkg:
        required: true
        type: string
      pkgversion:
        required: true
        type: string

jobs:
  break:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install Julia
      - uses: julia-actions/setup-julia@latest
        with:
          version: 1
          arch: x64
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1

      # Breakage test
      - name: 'Breakage of ${{ inputs.pkg }}, ${{ inputs.pkgversion }} version, from ${{ inputs.caller }}'
        env:
          URL: ${{ inputs.pkg }}
          VERSION: ${{ inputs.pkgversion }}
        run: |
          set -v
          mkdir -p ./breakage
          #echo "${{ github.event.number }}" > ./breakage/NR
          #
          PKG_SRC_PATH=`pwd`
          PKG_SRC_NAME=`basename -s ".jl" $PKG_SRC_PATH`
          #
          git clone https://github.com/$URL
          export PKG=$(echo $URL | cut -f2 -d/)
          cd $PKG
          if [ $VERSION == "stable" ]; then
            TAG=$(git tag -l "v*" --sort=-creatordate | head -n1)
            if [ -z "$TAG" ]; then
              TAG="no_tag"
            else
              git checkout $TAG
            fi
          else
            TAG=$VERSION
          fi
          export TAG
          #
          PKG_SRC_VERSION=$(julia --project=@. -e 'using Pkg, Logging; with_logger(NullLogger()) do; Pkg.instantiate(); Pkg.installed()["'$PKG_SRC_NAME'"] |> println; end')
          export PKG_SRC_VERSION
          #
          julia -e 'using Pkg;
            PKG, TAG, VERSION, PKG_SRC_VERSION = ENV["PKG"], ENV["TAG"], ENV["VERSION"], ENV["PKG_SRC_VERSION"]
            joburl = joinpath(ENV["GITHUB_SERVER_URL"], ENV["GITHUB_REPOSITORY"], "actions/runs", ENV["GITHUB_RUN_ID"])
            open("../breakage/breakage-$PKG-$VERSION", "w") do io
              try
                TAG == "no_tag" && error("Not tag for $VERSION")
                pkg"activate .";
                pkg"instantiate";
                pkg"status";
                pkg"dev ../";
                pkg"build";
                pkg"test";

                print(io, "[![](https://img.shields.io/badge/$TAG-Pass-green)]($joburl) compat: v", PKG_SRC_VERSION);
              catch e
                @error e;
                print(io, "[![](https://img.shields.io/badge/$TAG-Fail-red)]($joburl) compat: v", PKG_SRC_VERSION);
              end;
            end'

      - uses: actions/upload-artifact@v4
        with:
          name: breakage-${{ inputs.pkgversion }}
          path: breakage/

  comment:
    needs: break
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: breakage/
          pattern: breakage-*
          merge-multiple: true

      - run: ls -R
      - run: |
          cd breakage
          echo "Breakage test results" > summary.md
          echo "Date: $(TZ=UTC-2 date '+%Y-%m-%d %H:%M:%S')" >> summary.md
          echo "| Package name | latest | stable |" >> summary.md
          echo "|--|--|--|" >> summary.md
          count=0
          for file in breakage-*
          do
            # [ "$file" == "NR" ] && continue
            # [ "$file" == "summary.md" ] && continue
            if [ $count == "0" ]; then
              name=$(echo $file | cut -f2 -d-)
              echo -n "| $name | "
            else
              echo -n "| "
            fi
            cat $file
            if [ $count == "0" ]; then
              echo -n " "
              count=1
            else
              echo " |"
              count=0
            fi
          done >> summary.md

      - name: PR comment with file
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Import file content from summary.md
            const fs = require('fs')
            const filePath = 'breakage/summary.md'
            const msg = fs.readFileSync(filePath, 'utf8')

            // Get the current PR number from context
            const prNumber = context.payload.pull_request.number

            // Fetch existing comments on the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            })

            // Find a previous comment by the bot to update
            const botComment = comments.find(comment => comment.user.id === 41898282)

            if (botComment) {
              // Update the existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: msg
              })
            } else {
              // Create a new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: msg
              })
            }
            
              
          path: pr/
